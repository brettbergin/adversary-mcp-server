{
  "scan_metadata": {
    "scan_id": "ae67c5f6-bbbf-4aeb-9eaa-c38dcc0dfbf4",
    "scan_type": "directory",
    "timestamp": "2025-08-17T04:06:28.809064+00:00",
    "requester": "mcp_client",
    "target_path": "/Users/brettbergin/code/adversary-mcp-server/examples",
    "language": null,
    "scanners_enabled": {
      "semgrep": true,
      "llm": false,
      "validation": false
    },
    "scanners_used": [
      "semgrep"
    ],
    "severity_threshold": "medium",
    "timeout_seconds": "600",
    "project_name": null,
    "additional_metadata": {
      "scan_id": "ae67c5f6-bbbf-4aeb-9eaa-c38dcc0dfbf4",
      "orchestration_version": "domain_v1",
      "scan_duration_seconds": 3.725351,
      "strategies_executed": 1,
      "strategy_results": {
        "semgrep": {
          "threats_found": 15,
          "metadata": {
            "scanner": "semgrep_static_analysis",
            "rules_count": 0,
            "scan_duration_ms": 0,
            "semgrep_version": "unknown",
            "scan_id": "ae67c5f6-bbbf-4aeb-9eaa-c38dcc0dfbf4"
          }
        }
      },
      "total_original_threats": 15,
      "aggregation_applied": true,
      "validation_applied": false,
      "severity_threshold": "medium",
      "execution_timestamp": "2025-08-17T04:06:32.536983",
      "request_configuration": {
        "scan_type": "directory",
        "scan_id": "ae67c5f6-bbbf-4aeb-9eaa-c38dcc0dfbf4",
        "target": "/Users/brettbergin/code/adversary-mcp-server/examples",
        "language": null,
        "scanners": {
          "semgrep": true,
          "llm": false,
          "validation": false
        },
        "severity_threshold": "medium",
        "scope": "Directory: examples (14 files)",
        "requester": "mcp_client"
      }
    }
  },
  "summary": {
    "total_threats": 15,
    "threat_count_by_severity": {
      "critical": 0,
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "threat_categories": [
      "cryptography",
      "injection",
      "deserialization",
      "validation",
      "xss",
      "rce",
      "configuration"
    ],
    "has_critical_threats": true,
    "is_empty": false,
    "high_confidence_threats": 15,
    "validated_threats": 0
  },
  "statistics": {
    "total_threats": 15,
    "by_severity": {
      "high": 11,
      "critical": 4
    },
    "by_source": {
      "semgrep": 15
    },
    "by_confidence": {
      "Very High": 15
    },
    "false_positives_filtered": 0,
    "files_scanned": 6,
    "lines_analyzed": 0,
    "scan_duration_seconds": 3.725351,
    "by_scanner": {
      "semgrep": {
        "threats_found": 15,
        "avg_confidence": 0.9333333333333333
      }
    }
  },
  "threats": [
    {
      "uuid": "c6a0d471-7673-4f8d-aff6-e02d84508178",
      "rule_id": "semgrep-go.lang.security.audit.crypto.math_random.math-random-used",
      "rule_name": "Semgrep: go.lang.security.audit.crypto.math_random.math-random-used",
      "description": "Do not use `math/rand`. Use `crypto/rand` instead.",
      "category": "cryptography",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_go.go",
        "line_number": 8,
        "column_number": 6
      },
      "code_snippet": "\"math/rand\"",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_go.go:8",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "785dc726-53a2-43b7-b705-c3050e8249f2",
      "rule_id": "semgrep-go.lang.security.audit.database.string-formatted-query.string-formatted-query",
      "rule_name": "Semgrep: go.lang.security.audit.database.string-formatted-query.string-formatted-query",
      "description": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.",
      "category": "injection",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_go.go",
        "line_number": 20,
        "column_number": 5
      },
      "code_snippet": "query := \"SELECT * FROM users WHERE id = '\" + userID + \"'\"",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_go.go:20",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "39fe7d6a-e2aa-4c3a-948b-38c6998fbf9c",
      "rule_id": "semgrep-go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5",
      "rule_name": "Semgrep: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5",
      "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "category": "cryptography",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_go.go",
        "line_number": 44,
        "column_number": 15
      },
      "code_snippet": "hasher := md5.New()",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_go.go:44",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "22517f8a-2e4a-42d1-b2bf-f1acd7e2a784",
      "rule_id": "semgrep-java.lang.security.audit.formatted-sql-string.formatted-sql-string",
      "rule_name": "Semgrep: java.lang.security.audit.formatted-sql-string.formatted-sql-string",
      "description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
      "category": "injection",
      "severity": "critical",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java",
        "line_number": 17,
        "column_number": 24
      },
      "code_snippet": "ResultSet rs = stmt.executeQuery(query);",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java:17",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "d7b65459-61d7-4c57-b820-5722bdf331dc",
      "rule_id": "semgrep-java.lang.security.audit.object-deserialization.object-deserialization",
      "rule_name": "Semgrep: java.lang.security.audit.object-deserialization.object-deserialization",
      "description": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.",
      "category": "deserialization",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java",
        "line_number": 39,
        "column_number": 9
      },
      "code_snippet": "ObjectInputStream ois = new ObjectInputStream(bis);",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java:39",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "59678cb1-a3fd-4b53-93ed-bfbfd391fa76",
      "rule_id": "semgrep-java.lang.security.audit.crypto.use-of-md5.use-of-md5",
      "rule_name": "Semgrep: java.lang.security.audit.crypto.use-of-md5.use-of-md5",
      "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.",
      "category": "cryptography",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java",
        "line_number": 46,
        "column_number": 54
      },
      "code_snippet": "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java:46",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "d0b2eafd-6c44-460d-9ae4-d7229b520371",
      "rule_id": "semgrep-java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
      "rule_name": "Semgrep: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect",
      "description": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.",
      "category": "validation",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java",
        "line_number": 73,
        "column_number": 5
      },
      "code_snippet": "public void openRedirect(HttpServletResponse response, String url) throws IOException {\n        // Redirect to user-provided URL without validation\n        response.sendRedirect(url);\n    }",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_java.java:73",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "e0870ab0-591c-4167-af1f-c3f260777e69",
      "rule_id": "semgrep-typescript.react.security.react-insecure-request.react-insecure-request",
      "rule_name": "Semgrep: typescript.react.security.react-insecure-request.react-insecure-request",
      "description": "Unencrypted request over HTTP detected.",
      "category": "xss",
      "severity": "critical",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_javascript.js",
        "line_number": 102,
        "column_number": 5
      },
      "code_snippet": "fetch('http://api.example.com/sensitive', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_javascript.js:102",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "bf0282c1-b8de-4ee7-954c-f669eb687400",
      "rule_id": "semgrep-python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "rule_name": "Semgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "description": "Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
      "category": "rce",
      "severity": "critical",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 43,
        "column_number": 47
      },
      "code_snippet": "subprocess.call(\"ls \" + user_input, shell=True)  # noqa: S602",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:43",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "52f8fbaa-8646-4088-a449-4dfb457af3a3",
      "rule_id": "semgrep-python.lang.security.deserialization.pickle.avoid-pickle",
      "rule_name": "Semgrep: python.lang.security.deserialization.pickle.avoid-pickle",
      "description": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "category": "deserialization",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 49,
        "column_number": 12
      },
      "code_snippet": "return pickle.loads(serialized_data)  # noqa: S301",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:49",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "9c9c7248-6062-4c1f-a9c6-b683d1931d3c",
      "rule_id": "semgrep-python.lang.security.audit.eval-detected.eval-detected",
      "rule_name": "Semgrep: python.lang.security.audit.eval-detected.eval-detected",
      "description": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "category": "injection",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 102,
        "column_number": 14
      },
      "code_snippet": "result = eval(user_code)  # noqa: S307",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:102",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "e29b11dc-1e38-4116-9697-35cab069dd12",
      "rule_id": "semgrep-python.lang.security.audit.exec-detected.exec-detected",
      "rule_name": "Semgrep: python.lang.security.audit.exec-detected.exec-detected",
      "description": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "category": "injection",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 109,
        "column_number": 5
      },
      "code_snippet": "exec(user_script)  # noqa: S102",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:109",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "7dda23d7-0a39-4794-a56c-4c2211ec0932",
      "rule_id": "semgrep-python.flask.security.audit.debug-enabled.debug-enabled",
      "rule_name": "Semgrep: python.flask.security.audit.debug-enabled.debug-enabled",
      "description": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "category": "configuration",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 126,
        "column_number": 5
      },
      "code_snippet": "app.run(debug=True)  # noqa: S201",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:126",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "18f05a55-4ba5-49fe-b69b-744175f21f05",
      "rule_id": "semgrep-ruby.lang.security.weak-hashes-md5.weak-hashes-md5",
      "rule_name": "Semgrep: ruby.lang.security.weak-hashes-md5.weak-hashes-md5",
      "description": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.",
      "category": "cryptography",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_ruby.rb",
        "line_number": 38,
        "column_number": 3
      },
      "code_snippet": "Digest::MD5.hexdigest(password)",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_ruby.rb:38",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "0ee394af-dacb-4a4d-bb7a-8b5d10b2ad30",
      "rule_id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process",
      "rule_name": "Semgrep: javascript.lang.security.detect-child-process.detect-child-process",
      "description": "Detected calls to child_process from a function argument `userInput`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "category": "injection",
      "severity": "critical",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_typescript.ts",
        "line_number": 17,
        "column_number": 10
      },
      "code_snippet": "exec(`ls ${userInput}`, (error, stdout, stderr) => {",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_typescript.ts:17",
      "is_false_positive": false,
      "metadata": {}
    }
  ],
  "validation_info": null,
  "scanner_execution_summary": {
    "total_scanners_used": 1,
    "scanners": {
      "semgrep": {
        "status": "completed",
        "threats_found": 15,
        "execution_time_ms": 0
      }
    }
  }
}
