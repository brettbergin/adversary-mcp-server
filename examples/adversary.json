{
  "scan_metadata": {
    "scan_id": "3d4eff68-250f-4d4b-945e-f88570386a8c",
    "scan_type": "file",
    "timestamp": "2025-08-17T04:05:42.602391",
    "requester": "cli",
    "target_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
    "language": "python",
    "scanners_enabled": {
      "semgrep": true,
      "llm": false,
      "validation": false
    },
    "scanners_used": [
      "semgrep"
    ],
    "severity_threshold": "medium",
    "timeout_seconds": null,
    "project_name": null,
    "additional_metadata": {
      "scan_id": "3d4eff68-250f-4d4b-945e-f88570386a8c",
      "orchestration_version": "domain_v1",
      "scan_duration_seconds": 5.418981,
      "strategies_executed": 1,
      "strategy_results": {
        "semgrep": {
          "threats_found": 5,
          "metadata": {
            "scanner": "semgrep_static_analysis",
            "rules_count": 0,
            "scan_duration_ms": 0,
            "semgrep_version": "unknown",
            "scan_id": "3d4eff68-250f-4d4b-945e-f88570386a8c"
          }
        }
      },
      "total_original_threats": 5,
      "aggregation_applied": true,
      "validation_applied": false,
      "severity_threshold": "medium",
      "execution_timestamp": "2025-08-17T04:05:48.022936",
      "request_configuration": {
        "scan_type": "file",
        "scan_id": "3d4eff68-250f-4d4b-945e-f88570386a8c",
        "target": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "language": "python",
        "scanners": {
          "semgrep": true,
          "llm": false,
          "validation": false
        },
        "severity_threshold": "medium",
        "scope": "File: vulnerable_python.py",
        "requester": "cli"
      }
    }
  },
  "summary": {
    "total_threats": 5,
    "threat_count_by_severity": {
      "critical": 0,
      "high": 0,
      "medium": 0,
      "low": 0
    },
    "threat_categories": [
      "rce",
      "deserialization",
      "injection",
      "configuration"
    ],
    "has_critical_threats": true,
    "is_empty": false,
    "high_confidence_threats": 5,
    "validated_threats": 0
  },
  "statistics": {
    "total_threats": 5,
    "by_severity": {
      "critical": 1,
      "high": 4
    },
    "by_source": {
      "semgrep": 5
    },
    "by_confidence": {
      "Very High": 5
    },
    "false_positives_filtered": 0,
    "files_scanned": 1,
    "lines_analyzed": 0,
    "scan_duration_seconds": 5.418981,
    "by_scanner": {
      "semgrep": {
        "threats_found": 5,
        "avg_confidence": 0.93
      }
    }
  },
  "threats": [
    {
      "uuid": "9d7b39e5-165b-449e-8253-9f5a6934de4c",
      "rule_id": "semgrep-python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "rule_name": "Semgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "description": "Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
      "category": "rce",
      "severity": "critical",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 43,
        "column_number": 47
      },
      "code_snippet": "subprocess.call(\"ls \" + user_input, shell=True)  # noqa: S602",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:43",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "d75d5741-8e48-43c3-9813-859a85896a40",
      "rule_id": "semgrep-python.lang.security.deserialization.pickle.avoid-pickle",
      "rule_name": "Semgrep: python.lang.security.deserialization.pickle.avoid-pickle",
      "description": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "category": "deserialization",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 49,
        "column_number": 12
      },
      "code_snippet": "return pickle.loads(serialized_data)  # noqa: S301",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:49",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "eb8a8b19-dcd4-43d5-8bbd-94ea5fd08701",
      "rule_id": "semgrep-python.lang.security.audit.eval-detected.eval-detected",
      "rule_name": "Semgrep: python.lang.security.audit.eval-detected.eval-detected",
      "description": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "category": "injection",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 102,
        "column_number": 14
      },
      "code_snippet": "result = eval(user_code)  # noqa: S307",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:102",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "704593f3-5a5a-42f8-a91a-a991d9ac9692",
      "rule_id": "semgrep-python.lang.security.audit.exec-detected.exec-detected",
      "rule_name": "Semgrep: python.lang.security.audit.exec-detected.exec-detected",
      "description": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "category": "injection",
      "severity": "high",
      "confidence": {
        "score": 0.95,
        "percentage": 95.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 109,
        "column_number": 5
      },
      "code_snippet": "exec(user_script)  # noqa: S102",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:109",
      "is_false_positive": false,
      "metadata": {}
    },
    {
      "uuid": "df0ce699-ff20-4815-bff3-f16562c3104e",
      "rule_id": "semgrep-python.flask.security.audit.debug-enabled.debug-enabled",
      "rule_name": "Semgrep: python.flask.security.audit.debug-enabled.debug-enabled",
      "description": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "category": "configuration",
      "severity": "high",
      "confidence": {
        "score": 0.9,
        "percentage": 90.0,
        "level": "Very High"
      },
      "location": {
        "file_path": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py",
        "line_number": 126,
        "column_number": 5
      },
      "code_snippet": "app.run(debug=True)  # noqa: S201",
      "source_scanner": "semgrep",
      "fingerprint": "/Users/brettbergin/code/adversary-mcp-server/examples/vulnerable_python.py:126",
      "is_false_positive": false,
      "metadata": {}
    }
  ],
  "validation_info": null,
  "scanner_execution_summary": {
    "total_scanners_used": 1,
    "scanners": {
      "semgrep": {
        "status": "completed",
        "threats_found": 5,
        "execution_time_ms": 0
      }
    }
  }
}
